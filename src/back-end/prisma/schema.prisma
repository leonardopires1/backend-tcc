generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 Int                @id @default(autoincrement())
  nome               String
  email              String             @unique
  senha              String
  cpf                String             @unique
  telefone           String             @unique
  genero             String
  criadoEm           DateTime           @default(now())
  moradiasDono       Moradia[]          @relation("DonoMoradia") // Relacionamento para moradias onde é dono (um-para-muitos)
  moradia            Moradia?           @relation("UsuarioMoradia", fields: [moradiaId], references: [id]) // Relacionamento com a moradia
  moradiaId          Int? // Referência para a moradia
  atribuicoesTarefas AtribuicaoTarefa[]
  despesasUsuario    DespesaUsuario[]
  moradias           Moradia[]          @relation("Moradores") // Relacionamento inverso para moradores
  resetToken         String?
  resetTokenExp      DateTime?
  avatarUrl          String? // Campo para armazenar o nome do arquivo do avatar
}

model Moradia {
  id               Int             @id @default(autoincrement())
  nome             String
  descricao        String          @default("Moradia compartilhada")
  cep              String?         // CEP da moradia
  latitude         Float?          // Latitude para localização no mapa
  longitude        Float?          // Longitude para localização no mapa
  criadoEm         DateTime        @default(now())
  valorMensalidade Float
  imagemUrl        String?         // Campo para armazenar URL/nome da imagem da moradia
  dono             Usuario        @relation("DonoMoradia", fields: [donoId], references: [id]) // Relacionamento com o dono (um-para-muitos)
  donoId           Int // Referência ao dono (usuário pode ser dono de múltiplas moradias)
  moradores        Usuario[]       @relation("Moradores") // Relacionamento com vários usuários morando na mesma moradia
  usuarios         Usuario[]       @relation("UsuarioMoradia") // Relacionamento inverso para moradia em Usuario
  tarefas          Tarefa[]
  despesas         Despesa[]
  regrasMoradia    RegrasMoradia[]
  comodidades      Comodidades[]
}

model Tarefa {
  id          Int                @id @default(autoincrement())
  nome        String
  descricao   String?
  criadoEm    DateTime           @default(now())
  moradia     Moradia            @relation(fields: [moradiaId], references: [id])
  moradiaId   Int
  atribuicoes AtribuicaoTarefa[]
}

model Despesa {
  id         Int              @id @default(autoincrement())
  nome       String
  valorTotal Float
  vencimento DateTime
  tipo       String?
  criadoEm   DateTime         @default(now())
  moradia    Moradia          @relation(fields: [moradiaId], references: [id])
  moradiaId  Int
  usuarios   DespesaUsuario[]
}

model AtribuicaoTarefa {
  id        Int     @id @default(autoincrement())
  concluida Boolean @default(false)
  tarefa    Tarefa  @relation(fields: [tarefaId], references: [id])
  tarefaId  Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  usuarioId Int
  DataHoraConclusao DateTime?
  @@unique([tarefaId, usuarioId])               // evita atribuir a mesma tarefa
}

model DespesaUsuario {
  id            Int       @id @default(autoincrement())
  valor         Float
  pago          Boolean   @default(false)
  dataPagamento DateTime?
  usuario       Usuario   @relation(fields: [usuarioId], references: [id])
  usuarioId     Int
  despesa       Despesa   @relation(fields: [despesaId], references: [id])
  despesaId     Int
}

model Regras {
  id            Int             @id @default(autoincrement())
  titulo        String          @unique         // evita duplicidade de títulos
  descricao     String?
  regrasMoradia RegrasMoradia[]
}

model RegrasMoradia {
  id        Int     @id @default(autoincrement())
  moradia   Moradia @relation(fields: [moradiaId], references: [id])
  moradiaId Int
  regra     Regras  @relation(fields: [regraId], references: [id])
  regraId   Int
  @@unique([moradiaId, regraId])               // evita vincular a mesma regra 2x na mesma moradia
}

model Comodidades {
  id        Int     @id @default(autoincrement())
  nome      String
  descricao String?
  moradia   Moradia @relation(fields: [moradiaId], references: [id])
  moradiaId Int
}
